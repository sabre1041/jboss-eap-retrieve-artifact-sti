#!/bin/sh

# Source code provided to STI is at ${HOME}/source
LOCAL_SOURCE_DIR=${HOME}/source
mkdir -p $LOCAL_SOURCE_DIR

# Resulting WAR files will be deployed to /opt/eap/standalone/deployments
DEPLOY_DIR=$JBOSS_HOME/standalone/deployments

function copy_artifacts() {
  if [ -d $LOCAL_SOURCE_DIR/$1 ]; then
    echo "Copying all WAR and EAR artifacts from $LOCAL_SOURCE_DIR/$1 directory into $DEPLOY_DIR for later deployment..."
    cp -v $LOCAL_SOURCE_DIR/$1/*.jar $LOCAL_SOURCE_DIR/$1/*.war $LOCAL_SOURCE_DIR/$1/*.ear $DEPLOY_DIR 2> /dev/null
  fi
}

# Copy the source for compilation
cp -ad /tmp/src/* $LOCAL_SOURCE_DIR

# If a pom.xml is present, this is a normal build scenario
# so run maven.
if [ -f "$LOCAL_SOURCE_DIR/pom.xml" ]; then
  pushd $LOCAL_SOURCE_DIR &> /dev/null

  if [ -z "$MAVEN_ARGS" ]; then
    export MAVEN_ARGS="package -Popenshift -DskipTests -Dcom.redhat.xpaas.repo.redhatga"
  fi

  echo "Found pom.xml... attempting to build with 'mvn -e ${MAVEN_ARGS}'"

  echo "Using $(mvn --version)"

  # Execute the actual build
  mvn $MAVEN_ARGS

  ERR=$?
  if [ $ERR -ne 0 ]; then
    echo "Aborting due to error code $ERR from Maven build"
    exit $ERR
  fi

  # Copy built artifacts (if any!) from the target/ directory
  # to the $JBOSS_HOME/standalone/deployments/ directory for
  # later deployment
  copy_artifacts "target"

  # clean up after maven
  mvn clean
  if [ -d "$HOME/.m2/repository" ]; then
      rm -r "$HOME/.m2/repository"
    fi

    popd &> /dev/null
  fi

  # Copy (probably binary) artifacts from the deployments/
  # directory to the $JBOSS_HOME/standalone/deployments/
  # directory for later deployment
  copy_artifacts "deployments"

  if [ -d $LOCAL_SOURCE_DIR/configuration ]; then
    echo "Copying config files from project..."
    cp -v $LOCAL_SOURCE_DIR/configuration/* $JBOSS_HOME/standalone/configuration/
  fi

  if [ -d $LOCAL_SOURCE_DIR/modules ]; then
    echo "Copying modules from project..."
    cp -vr $LOCAL_SOURCE_DIR/modules/* $JBOSS_HOME/modules/
  fi
  
  # Download Prepackaged Artifacts
  
  ## Default values
  artifact_remote_host="localhost:8081"
  artifact_packaging="war"
  
  ARTIFACT_REMOTE_HOST=${ARTIFACT_REMOTE_HOST:-$artifact_remote_host}
  ARTIFACT_PACKAGING=${ARTIFACT_PACKAGING:-$artifact_packaging}
  
  # Check all 11tybillion variables then pull
  echo "Checking to see if Remote Artifact Configuration Set"
  if [ ! -z "${ARTIFACT_REMOTE_HOST}" ] && [ ! -z "${ARTIFACT_GROUP_ID}" ] && [ ! -z "${ARTIFACT_ID}" ] && [ ! -z "${ARTIFACT_VERSION}" ] && [ ! -z "${ARTIFACT_PACKAGING}" ]; then
    mkdir -p $LOCAL_SOURCE_DIR/remote-artifacts
	
	pushd $LOCAL_SOURCE_DIR/remote-artifacts &> /dev/null
  
    echo "Downloading Artifact ${ARTIFACT_GROUP_ID}:${ARTIFACT_ID}:${ARTIFACT_VERSION}:${ARTIFACT_PACKAGING} from ${ARTIFACT_REMOTE_HOST}"

	curl -L -sf -o "${ARTIFACT_ID}-${ARTIFACT_VERSION}.${ARTIFACT_PACKAGING}" "http://${ARTIFACT_REMOTE_HOST}/nexus/service/local/artifact/maven/redirect?r=public&g=${ARTIFACT_GROUP_ID}&a=${ARTIFACT_ID}&v=${ARTIFACT_VERSION}&p=${ARTIFACT_PACKAGING}"

  ERR=$?
  if [ $ERR -ne 0 ]; then
    echo "Aborting due to error code $ERR from Download"
    exit $ERR
  fi

	popd &> /dev/null
	
	echo "Copying remote artifact..."
	copy_artifacts "remote-artifacts"
  else
    echo "Not Downloading Remote Artifacts"
  fi
  

  exit 0
  